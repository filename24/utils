{"version":3,"sources":["../src/index.ts","../src/Logger.ts"],"sourcesContent":["export * from './Logger';\r\n","import chalk from 'chalk';\r\nimport stripColor from 'strip-ansi';\r\nimport winston, { createLogger, format, transports, addColors } from 'winston';\r\n\r\nconst { printf, splat, colorize, timestamp, ms, combine } = format;\r\n\r\nconst colors = {\r\n  fatal: chalk.bgWhite.red.bold,\r\n  error: chalk.red,\r\n  warn: chalk.yellow,\r\n  info: chalk.cyanBright,\r\n  chat: (text: string) => text,\r\n  verbose: chalk.blueBright,\r\n  debug: chalk.blue,\r\n};\r\n\r\nconst myFormat = printf(({ level, message, label, ms, timestamp }) => {\r\n  const _level = stripColor(level) as LoggerLevel;\r\n  const colorizer = colors[_level];\r\n  return `${chalk.gray(`[${timestamp}]`)} ${_level === 'chat' ? '' : `[ ${label} ] `}${level} ${colorizer(\r\n    message,\r\n  )} ${chalk.magentaBright(ms)}`;\r\n});\r\n\r\nconst myCustomLevels = {\r\n  levels: {\r\n    fatal: 0,\r\n    error: 1,\r\n    warn: 2,\r\n    info: 3,\r\n    chat: 4,\r\n    verbose: 5,\r\n    debug: 6,\r\n  },\r\n  colors: {\r\n    fatal: 'whiteBG red bold',\r\n    error: 'red',\r\n    warn: 'yellow',\r\n    info: 'white',\r\n    chat: 'grey',\r\n    verbose: 'cyan',\r\n    debug: 'blue',\r\n  },\r\n};\r\n\r\naddColors(myCustomLevels.colors);\r\n\r\nexport class Logger {\r\n  public scope: string;\r\n  private readonly logger: winston.Logger;\r\n  public readonly options: LoggerOptions;\r\n\r\n  constructor(scope: string, options: LoggerOptions = { level: 'info' }) {\r\n    this.options = options;\r\n    this.scope = scope;\r\n    this.logger = createLogger({\r\n      levels: myCustomLevels.levels,\r\n      transports: [\r\n        new transports.Console({\r\n          level: options.dev ? 'debug' : options.level,\r\n          format: combine(\r\n            splat(),\r\n            colorize(),\r\n            timestamp({\r\n              format: 'YYYY-MM-DD HH:mm:ss',\r\n            }),\r\n            ms(),\r\n            myFormat,\r\n          ),\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n\r\n  log(message: string, ...args: any[]) {\r\n    this.logger.info(message, ...args, { label: this.scope });\r\n  }\r\n\r\n  info(message: string, ...args: any[]) {\r\n    this.logger.info(message, ...args, { label: this.scope });\r\n  }\r\n  warn(message: string, ...args: any[]) {\r\n    this.logger.warn(message, ...args, { label: this.scope });\r\n  }\r\n\r\n  error(message: string, ...args: any[]) {\r\n    this.logger.error(message, ...args, { label: this.scope });\r\n  }\r\n\r\n  debug(message: string, ...args: any[]) {\r\n    this.logger.debug(message, ...args, { label: this.scope });\r\n  }\r\n\r\n  fatal(message: string, ...args: any[]): any {\r\n    this.logger.error(message, ...args, { label: this.scope });\r\n    return process.exit(1);\r\n  }\r\n}\r\n\r\nexport type LoggerLevel = 'fatal' | 'error' | 'warn' | 'info' | 'chat' | 'verbose' | 'debug';\r\nexport interface LoggerOptions {\r\n  level?: LoggerLevel;\r\n  dev?: boolean;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAkB;AAClB,wBAAuB;AACvB,qBAAqE;AAErE,IAAM,EAAE,QAAQ,OAAO,UAAU,WAAW,IAAI,QAAQ,IAAI;AAE5D,IAAM,SAAS;AAAA,EACb,OAAO,aAAAA,QAAM,QAAQ,IAAI;AAAA,EACzB,OAAO,aAAAA,QAAM;AAAA,EACb,MAAM,aAAAA,QAAM;AAAA,EACZ,MAAM,aAAAA,QAAM;AAAA,EACZ,MAAM,CAAC,SAAiB;AAAA,EACxB,SAAS,aAAAA,QAAM;AAAA,EACf,OAAO,aAAAA,QAAM;AACf;AAEA,IAAM,WAAW,OAAO,CAAC,EAAE,OAAO,SAAS,OAAO,IAAAC,KAAI,WAAAC,WAAU,MAAM;AACpE,QAAM,aAAS,kBAAAC,SAAW,KAAK;AAC/B,QAAM,YAAY,OAAO;AACzB,SAAO,GAAG,aAAAH,QAAM,KAAK,IAAIE,aAAY,KAAK,WAAW,SAAS,KAAK,KAAK,aAAa,SAAS;AAAA,IAC5F;AAAA,EACF,KAAK,aAAAF,QAAM,cAAcC,GAAE;AAC7B,CAAC;AAED,IAAM,iBAAiB;AAAA,EACrB,QAAQ;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AAAA,EACA,QAAQ;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACF;AAAA,IAEA,0BAAU,eAAe,MAAM;AAExB,IAAM,SAAN,MAAa;AAAA,EACX;AAAA,EACU;AAAA,EACD;AAAA,EAEhB,YAAY,OAAe,UAAyB,EAAE,OAAO,OAAO,GAAG;AACrE,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,aAAS,6BAAa;AAAA,MACzB,QAAQ,eAAe;AAAA,MACvB,YAAY;AAAA,QACV,IAAI,0BAAW,QAAQ;AAAA,UACrB,OAAO,QAAQ,MAAM,UAAU,QAAQ;AAAA,UACvC,QAAQ;AAAA,YACN,MAAM;AAAA,YACN,SAAS;AAAA,YACT,UAAU;AAAA,cACR,QAAQ;AAAA,YACV,CAAC;AAAA,YACD,GAAG;AAAA,YACH;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,IAAI,YAAoB,MAAa;AACnC,SAAK,OAAO,KAAK,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,EAC1D;AAAA,EAEA,KAAK,YAAoB,MAAa;AACpC,SAAK,OAAO,KAAK,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,EAC1D;AAAA,EACA,KAAK,YAAoB,MAAa;AACpC,SAAK,OAAO,KAAK,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAM,YAAoB,MAAa;AACrC,SAAK,OAAO,MAAM,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,YAAoB,MAAa;AACrC,SAAK,OAAO,MAAM,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,YAAoB,MAAkB;AAC1C,SAAK,OAAO,MAAM,SAAS,GAAG,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AACzD,WAAO,QAAQ,KAAK,CAAC;AAAA,EACvB;AACF;AAlDa;","names":["chalk","ms","timestamp","stripColor"]}